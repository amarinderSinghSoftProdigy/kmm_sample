name: ios-development

on:
  pull_request:
    branches: [ develop ]
    types: [ closed ]

  workflow_dispatch:

jobs:
  check:
    runs-on: macos-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Booleans
        env:
          EVENT: ${{ github.event_name }}
          MERGED: ${{ github.event.pull_request.merged }}
          REF: ${{ github.head_ref }}
        run: |
          echo $EVENT
          echo $MERGED
          echo $REF

  deploy:
    runs-on: macos-latest

    if: contains(github.head_ref, 'ios/')
    
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Set CI gradle.properties
        run: cp gradle.properties.ci gradle.properties

      - name: Set environment variables from project settings
        run: |
          exec .github/scripts/set-env-from-xcodeproj.sh

      - name: Import signing certificate
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.IOS_SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.IOS_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          exec .github/scripts/import-certificate.sh

      - name: Import provisioning profile
        env:
          PROVISIONING_PROFILE_DATA: ${{ secrets.IOS_PROVISIONING_PROFILE_DATA }}
        run: |
          exec .github/scripts/import-profile.sh

      - name: Update the build version
        run: |
          cd ios
          xcrun agvtool what-version
          xcrun agvtool next-version -all
          xcrun agvtool what-version

      - name: Build app
        env:
          CONFIGURATION: Release
        run: |
          cd ios
          fastlane run build_app scheme:"Medico"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build.log
          path: ~/Library/Logs/gym/*.log

      - name: Upload app to App Store Connect
        env:
          APP_STORE_CONNECT_USERNAME: ${{ secrets.IOS_APP_STORE_CONNECT_USERNAME }}
          APP_STORE_CONNECT_PASSWORD: ${{ secrets.IOS_APP_STORE_CONNECT_PASSWORD }}
        run: |
          cd ios
          xcrun altool --upload-app -t ios -f "$PRODUCT_NAME.ipa" -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"
      
      - name: Get the build version
        if: always()
        run: |
          cd ios
          MARKETING_VERSION="$(xcodebuild -showBuildSettings | grep MARKETING_VERSION | tr -d 'MARKETING_VERSION =')"
          BUILD_VERSION="$(xcodebuild -showBuildSettings | grep CURRENT_PROJECT_VERSION | tr -d 'CURRENT_PROJECT_VERSION =')"
          echo "PROJECT_VERSION=$MARKETING_VERSION($BUILD_VERSION)" >> $GITHUB_ENV

      - name: Slack Notification for the App Store Connect upload
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: ${{ secrets.REPO_NAME }}
          fields: all
          text: iOS Build ${{ env.PROJECT_VERSION }} upload to Test Flight's been ${{ job.status == 'success' && 'Succeeded' || job.status == 'failure' && 'Failed' || 'Canceled' }}
          channel: mobile-release-pipeline
          icon_emoji: ${{ job.status == 'success' && ':white_check_mark:' || job.status == 'failure' && ':x:' || ':warning:' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_MOBILE_RELEASE_WEBHOOK }}
        if: always()

      - name: Upload the build version to the GitHub repositoty
        if: success()
        id: github_build_version_update
        run: |
          git status
          git add .
          git commit -m "bump version"
          git push origin HEAD

      - name: Slack Notification for the build version origin update
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: ${{ secrets.REPO_NAME }}
          fields: all
          text: iOS build version update to ${{ env.PROJECT_VERSION }} in the GitHub repository was ${{ job.status == 'success' && 'Succeeded' || job.status == 'failure' && 'Failed\n If the Test Flight upload was succeeded, you need to update the project version manually in the Xcode project to the latest Test Fligth version. Otherwise, no action needed.' || 'Canceled' }}
          channel: mobile-release-pipeline
          icon_emoji: ${{ job.status == 'success' && ':white_check_mark:' || job.status == 'failure' && ':x:' || ':warning:' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_MOBILE_RELEASE_WEBHOOK }}
        if: steps.github_build_version_update.outcome != 'skipped'
